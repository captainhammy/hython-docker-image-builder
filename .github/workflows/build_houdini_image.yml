name: Docker Image Builder

on:
  schedule:
    # Run every day at 9:15 PM UTC which should be after any time
    # SideFX would have updated the production builds.
    - cron: '15 21 * * *'

  workflow_dispatch:
      inputs:
        houdini-version:
          description: Houdini Version
        force:
          type: boolean
          description: Overwrite Existing Tag
          default: false

env:
  TAG_NAME: captainhammy/hython-runner
  TEST_DIR: /tmp/image_test
  FORCE_BUILD: ${{ github.event_name != 'workflow_dispatch' && 'false' || inputs.force }}

jobs:
  build-houdini-docker-image:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
         python-version: 3.11

      - name: Install dependencies
        run: pip install -r requirements.txt

      # Update our PYTHONPATH so that it can execute our own repository tools.
      - name: Set Local PYTHONPATH
        run: |
          echo "PYTHONPATH=${GITHUB_WORKSPACE}/python:${PYTHONPATH}" >> $GITHUB_ENV

      - name: Check for build
        id: checker
        run: |
          python bin/get_houdini_version_to_build.py ${{ env.FORCE_BUILD == 'true' && '--force' || '' }} ${{ inputs.houdini-version || '""' }} ${{ env.TAG_NAME }} ${{ secrets.SESI_CLIENT_ID }} ${{ secrets.SESI_CLIENT_SECRET }}

      - name: Ensure disk space
        if: steps.checker.outputs.build_version != ''
        run: |
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/share/boost "$AGENT_TOOLSDIRECTORY" /usr/local/lib/android /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup /usr/lib/jvm || true
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          df . -h

      - name: Copy default pip packages file
        if: steps.checker.outputs.build_version != ''
        run: cp dockerfiles/default_pip_packages.txt dockerfiles/${{ steps.checker.outputs.build_version }}/

      - name: Set up QEMU
        if: steps.checker.outputs.build_version != ''
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        if: steps.checker.outputs.build_version != ''
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: steps.checker.outputs.build_version != ''
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build docker image
        if: steps.checker.outputs.build_version != ''
        uses: docker/build-push-action@v5
        with:
          context: dockerfiles/${{ steps.checker.outputs.build_version }}
          # So we can test the image after building
          load: true
          build-args: |
            HOUDINI_VERSION=${{ steps.checker.outputs.build_full_version }}
            HOUDINI_INSTALLER_FILENAME=${{ steps.checker.outputs.houdini_launcher_filename }}
            HOUDINI_ISO_FILENAME=${{ steps.checker.outputs.houdini_iso_filename }}
          # Tag the new image with the full version and the major.minor (e.g. 20.0.724, 20.0)
          tags: ${{ env.TAG_NAME }}:${{ steps.checker.outputs.build_full_version }},${{ env.TAG_NAME }}:${{ steps.checker.outputs.build_version }}

      - name: Test built image
        if: steps.checker.outputs.build_version != ''
        run: |
          docker run -e CLIENT_ID=${{ secrets.SESI_CLIENT_ID }} -e CLIENT_SECRET=${{ secrets.SESI_CLIENT_SECRET }} -e LICENSE_SERVER=${{ secrets.LICENSE_SERVER }} -v ./tests:${{ env.TEST_DIR }} -w ${{ env.TEST_DIR }} ${{ env.TAG_NAME }}:${{ steps.checker.outputs.build_full_version }} ./run_built_container_tests.bash
          docker run -e CLIENT_ID=${{ secrets.SESI_CLIENT_ID }} -e CLIENT_SECRET=${{ secrets.SESI_CLIENT_SECRET }} -e LICENSE_SERVER=${{ secrets.LICENSE_SERVER }} -v ./tests:${{ env.TEST_DIR }} -w ${{ env.TEST_DIR }} ${{ env.TAG_NAME }}:${{ steps.checker.outputs.build_version }} ./run_built_container_tests.bash

      - name: Push docker image
        if: steps.checker.outputs.build_version != ''
        run: |
          docker push --all-tags ${{ env.TAG_NAME }}
